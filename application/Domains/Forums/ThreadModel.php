<?php namespace App\Domains\Forums;

use CodeIgniter\Model;
use Tests\Support\Models\UserModel;

/**
 * ThreadModel Model
 *
 * Generated by Vulcan at 2017-06-27 16:23pm
 */
class ThreadModel extends Model
{
	protected $table      = 'threads';
	protected $primaryKey = 'id';

	protected $returnType     = 'App\Domains\Forums\Thread';
	protected $useSoftDeletes = false;

	protected $allowedFields = ['user_id', 'forum_id', 'title', 'first_post', 'views', 'post_count', 'deleted_at'];

	protected $useTimestamps = true;
	protected $createdField  = 'created_at';
	protected $updatedField  = 'updated_at';
	protected $dateFormat    = 'datetime';

	protected $validationRules    = [
		'id'         => 'integer|max_length[11]',
		'user_id'    => 'integer|max_length[11]',
		'forum_id'   => 'integer|max_length[5]',
		'title'      => 'alpha_numeric_spaces|max_length[255]',
		'first_post' => 'integer|max_length[11]',
		'views'      => 'integer|max_length[20]',
		'posts'      => 'integer|max_length[11]',
		'created_at' => '',
		'updated_at' => '',
		'deleted_at' => '',

	];
	protected $validationMessages = [];
	protected $skipValidation     = false;

	/**
	 * Returns the total number of non-deleted
	 * threads in the system.
	 *
	 * @return int
	 */
	public function totalThreads(): int
	{
		return $this->builder()->where('deleted_at IS NULL')->countAllResults();
	}

	/**
	 * Populates the posts for all threads provided
	 * to skip the N+1 problem.
	 *
	 * @param array $threads
	 *
	 * @return array
	 */
	public function fillPostsIntoThreads(array $threads = [])
	{
		if (empty($threads)) return $threads;

		$postModel = new PostModel();

		// Rebuild the array so that the keys are the thread id for easier forum assignment.
		$newThreads = [];
		foreach ($threads as $thread)
		{
			$newThreads[$thread->id] = $thread;
		}
		$threads = $newThreads;
		unset($newThreads);

		// Get a list of thread ids
		$threadIDs = [];
		foreach ($threads as $thread)
		{
			$threadIDs[] = $thread->id;
		}

		// Get the posts for all of our categories
		$posts = $postModel->whereIn('thread_id', $threadIDs)->findAll();

		foreach ($posts as $post)
		{
			$threads[$post->thread_id]->posts[$post->id] = $post;
		}

		return $threads;
	}

}
